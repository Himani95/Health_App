{"version":3,"sources":["welcomepage.jsx","CreateAccountPage.js","CreateAccountDetails.jsx","SearchDocPage.js","Search.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["linkstyle","color","MainPage","id","align","border-botton","style","to","CreateAccountPage","props","state","loading","componentDidMount","setTimeout","setState","changeHandler","e","target","name","value","submitHandler","preventDefault","console","log","axios","post","then","response","catch","error","onclose","visible","window","alert","onSubmit","email","password","login","this","className","method","action","type","onChange","onClick","React","Component","SecondPage","SearchDocPage","ChangeField","Field","ChangeLocation","Location","onsubmit","checked","ThirdPage","App","apiResponse","fetch","res","text","callAPI","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.ffaa9d12.chunk.js","sourcesContent":["import React from \"react\";\n//import LoginForm from \"../components/LoginForm\";\nimport { Link } from \"react-router-dom\";\nimport { BeatLoader } from 'react-spinners';\n\n\n//Link Tag is used below for redirecting from one page to the another internally\n\nconst MainPage  = () => {\n    \n    return (\n        <div id=\"Head\">\n            <h1 align=\"center\" border-botton=\"1px\"> WELCOME TO <br/> INFIHEALTH!!!</h1>\n            <h3>Mission: To inspire hope and contribute to health and well-being by providing the best care and guidance to every patient through high quality virtual solutions</h3>\n            <br/>\n            <h5>Imagine a healthcare app that lets you see a doctor – virtually or in person – from the comfort of your home, open 24*7*365 days and eliminates the hassle of making an appointment. Won't that be just vowww!? INFIHEALTH allows patients to view doctors in specialities like opthalmology, dentistry, cardiology and others and view open appointment time slots in the next 24 hours and book it instantly online without being put on hold. You can also receive appointment reminder notifications offering a new solution for tech-savvy patient population. This app looks to provide people everything possible to a healthy living just at their fingertips. Come this way!!!</h5>\n            <Link style={linkstyle} to=\"/CreateAccountDetails\" >Create Account</Link>\n            \n            <br/>\n            \n            <Link style={linkstyle} to=\"/Search\" >Continue as Guest</Link>\n            \n        </div>\n    );\n\n};\n\nconst linkstyle = {\n    color: 'white'\n};\n\nexport default MainPage;\n","import React from 'react';\n//connecting LoginForm to redux store\nimport { connect } from 'react-redux';\n//to map login action creator into LoginForm\n//import { login } from '../redux/reducer';\n/*Date: 29June 2020\nAuthor: Himani \nDescription: React Router\nTo allow navigation to other pages from the home page \nrather than mentioning the url/path manually*/\nimport { Link } from \"react-router-dom\";\nimport { browserHistory } from \"react-router\";\nimport { BeatLoader } from 'react-spinners';\nimport axios from 'axios';\n\n/*Date:29 June 2020 \nAuthor: Himani\nDescription: To make the Login button work along with authentication\nReferences: https://www.youtube.com/watch?v=MdeqXWo4fOI */\n\n//<button onClick={this.onNavigateDetails} className=\"btn btn-primary\">Login</button>\n/* onNavigateDetails = () => {\n        this.props.history.push(\"/Details\")\n    }*/\n/*async function submitToServer(data) {\n    try {\n        let response = await fetch('https://localhost:3007', {\n            method: 'POST',\n            headers: {'Content-type': 'myapp/json',\n    },\n    body: JSON.stringify(data),\n    });\n        let responseJson = await response.json();\n        return responseJson;\n    } catch(error) {\n        console.error(); \n    }\n    \n}  */  \n\n/*Date: 29 June 2020\nAuthor: Himani\nDescription: To send the login details to server(server rendering)\nonSubmit={submitToServer({ email, password })\n.then(data => console.log(data))}*/\n\nclass CreateAccountPage extends React.Component {\n\n    state = {\n        loading: true\n    }\n\n    componentDidMount= () => {\n        setTimeout(() => {\n            this.setState({\n                loading:false\n            })\n        },3000)\n    }\n\n    changeHandler = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    submitHandler = e => {\n        e.preventDefault()//To avoid page refresh\n        console.log(this.state)\n        axios.post('https://localhost:9000/testAPI', this.state)\n        .then(response => {\n            console.log(response)\n        })\n        .catch(error => {\n            console.log(error)\n            \n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: ''\n        }\n\n    }\n    /*Date: 3 July 2020 \n    Author: Himani\n    Description: To give the user as much visual feedback as possible\n    Display a text message after clicking on a link*/\n    onclose = () => {\n        this.setState({visible: false});\n        window.alert(\"You have opted to register yourself.\");\n    }\n\n    render() {  \n        let {email, password} = this.state;//changed from let to const\n\n    return (\n        <div className=\"login-form-wrapper\" onSubmit={this.submitHandler}>\n            <form method='POST' action='https://localhost:9000/testAPI'></form>\n             <form name=\"loginForm\" onSubmit={this.submitHandler}>\n             \n                 <label>Full Name:     </label>\n                 <input type=\"text\" name=\"fullname\" />\n                 <br/>\n                 <br/>\n                 <label>Contact:     </label>\n                 <input type=\"contact\" name=\"contact\" />\n                 <br/>\n                 <br/>\n                 <label>Email:     </label>\n                 <input type=\"email\" name=\"email\"  value={email} onChange={this.changeHandler} />\n                 <br/>\n                 <br/>\n                 <label>Password:     </label>\n                 <input type=\"password\" name=\"password\" value={password} onChange={e => this.setState({password: e.target.value})} />\n                <br/>\n                <br/>\n                <label>Re-enter Password:     </label>\n                 <input type=\"password\" name=\"password\" value={password} onChange={e => this.setState({password: e.target.value})} />\n                 <br/>\n                 <br/>\n                 <label>Address:     </label>\n                 <input type=\"text\" name=\"address\" />\n                 <br/>\n                 <br/>\n\n                 {/*<input type=\"submit\" value=\"Login\" />*/}\n\n                 <button>\n                 <Link to=\"/Details\" onClick={this.onclose}>Register</Link>\n                 </button>\n\n                 <BeatLoader color=\"#26A65B\" />\n             </form>\n        </div>\n        );\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        //const { email, password } = this.state;\n\n        /*fetch('http://localhost:9000/testAPI' , {\n  method: \"POST\",\n  headers: {\n    'Content-type': 'application/json'\n  },\n  body: JSON.stringify(this.state)\n})\n.then((result) => result.json())\n.then((info) => { console.log(info); })*/\n\n        let { email, password } = this.state; //to retrieve email and password\n        this.props.login(email, password);\n\n    }\n}\n\nconst linkstyle = {\n    color: 'white'\n};\n\n\n//export default LoginForm;\nexport default CreateAccountPage;","import React from \"react\";\n//import CreateAccountDetails from \"./CreateAccountDetails\";\nimport CreateAccountPage from \"./CreateAccountPage\";\n\nconst SecondPage  = () => {\n    return (\n        <div>\n            <h2>Register to the guide of healthy living by entering few details</h2>\n            <CreateAccountPage />\n        </div>\n    );\n};\n\nexport default SecondPage;","import React from 'react';\n//connecting LoginForm to redux store\n                                import { connect } from 'react-redux';\n                                //to map login action creator into LoginForm\n                                //import { login } from '../redux/reducer';\n                                /*Date: 29June 2020\n                                Author: Himani \n                                Description: React Router\n                                To allow navigation to other pages from the home page \n                                rather than mentioning the url/path manually*/\n                                import { Link } from \"react-router-dom\";\n                                import { browserHistory } from \"react-router\";\n                                import { BeatLoader } from 'react-spinners';\n                                import axios from 'axios';\n                                \n                                /*Date:29 June 2020 \n                                Author: Himani\n                                Description: To make the Login button work along with authentication\n                                References: https://www.youtube.com/watch?v=MdeqXWo4fOI */\n                                \n                                //<button onClick={this.onNavigateDetails} className=\"btn btn-primary\">Login</button>\n                                /* onNavigateDetails = () => {\n                                        this.props.history.push(\"/Details\")\n                                    }*/\n                                /*async function submitToServer(data) {\n                                    try {\n                                        let response = await fetch('https://localhost:3007', {\n                                            method: 'POST',\n                                            headers: {'Content-type': 'myapp/json',\n                                    },\n                                    body: JSON.stringify(data),\n                                    });\n                                        let responseJson = await response.json();\n                                        return responseJson;\n                                    } catch(error) {\n                                        console.error(); \n                                    }\n                                    \n                                }  */  \n                                \n                                /*Date: 29 June 2020\n                                Author: Himani\n                                Description: To send the login details to server(server rendering)\n                                onSubmit={submitToServer({ email, password })\n                                .then(data => console.log(data))}*/\n                                \n                                class SearchDocPage extends React.Component {\n                                \n                                    \n                                \n                                    changeHandler = (e) => {\n                                        this.setState({[e.target.name]: e.target.value})\n                                    }\n                                \n                                    \n                                    constructor(props) {  \n                                        super(props)  \n                            \n                                        this.state = {  \n                                                Location: '',  \n                                                Field: ''  \n                            \n                                        }  \n                                }  \n\n                                ChangeField = (e) => {  \n                                    this.setState({  \n                                            Field: e.target.value  \n                                    })  \n                            }  \n                            ChangeLocation = (e) => {  \n                                    this.setState({  \n                                            Location: e.target.value  \n                                    })  \n                            }  \n                            onsubmit = (e) => {  \n                                e.preventDefault();  \n                                alert(`${this.state.Field},${this.state.Location}`)  \n                        }\n                                    /*Date: 3 July 2020 \n                                    Author: Himani\n                                    Description: To give the user as much visual feedback as possible\n                                    Display a text message after clicking on a link*/\n                                    onclose = () => {\n                                        this.setState({visible: false});\n                                        window.alert(\"You are at the Search Page.\");\n                                    }\n                                \n                                    render() { \n                                \n                                    return (\n\n                                        <div className=\"search-doc-wrapper\">\n                                            <form method='POST' action='https://localhost:9000/testAPI'></form>\n                                             <form name=\"searchdoc\" onSubmit={this.submitHandler}>\n                                                 <div>\n                                                 <input type=\"radio\" value=\"My Address\" checked={this.state.Location == \"My Address\"} onChange={this.ChangeLocation} />My Address  \n                             <input type=\"radio\" value=\"New Location\" checked={this.state.Location == \"New Location\"} onChange={this.ChangeLocation} />New Location\n                                                 </div>\n                                                <div className=\"field-dropdn\">\n                                                    <select className=\"dropdn-control\" value={this.state.Field} onChange={this.ChangeField}>\n                                                    <option value=\"1\">Ophthalmologist</option>  \n                               <option>Dental</option>  \n                                <option>Cardiologist</option>  \n                                 <option>Neurologist</option>\n                                 <option>Orthopedic</option>\n                                                        </select>\n                                                        </div> \n                                                 \n                                \n                                                 <br/>\n                                                 <br/>\n                                \n                                                 <button>\n                                                 <Link to=\"/DocDetails\" onClick={this.onclose}>Search</Link>\n                                                 </button>\n                                \n                                                 \n                                             </form>\n                                        </div>\n                                        );\n                                    }\n                                \n                                    onSubmit = (e) => {\n                                        e.preventDefault();\n                                        //const { email, password } = this.state;\n                                \n                                        /*fetch('http://localhost:9000/testAPI' , {\n                                  method: \"POST\",\n                                  headers: {\n                                    'Content-type': 'application/json'\n                                  },\n                                  body: JSON.stringify(this.state)\n                                })\n                                .then((result) => result.json())\n                                .then((info) => { console.log(info); })*/\n                                \n                                        let { email, password } = this.state; //to retrieve email and password\n                                        this.props.login(email, password);\n                                \n                                    }\n                                }\n                                \n                                const mapStateToProps = (state) => {\n                                    return {\n                                        isLoginPending: state.isLoginPending,\n                                        isLoginSuccess: state.isLoginSuccess,\n                                        loginError: state.loginError\n                                    };\n                                }\n                                \n                                const linkstyle = {\n                                    color: 'white'\n                                };\n                                \n                                \n                                //export default LoginForm;\n                                //<BeatLoader color=\"#26A65B\" />\n                                export default SearchDocPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n//import CreateAccountDetails from \"./CreateAccountDetails\";\nimport SearchDocPage from './SearchDocPage';\nimport CreateAccountPage from \"./CreateAccountDetails\";\n\nconst ThirdPage  = () => {\n    return (\n        <div>\n            <Link style={linkstyle} to=\"/welcomepage\" >Home</Link>\n            <h2>Search for your doctor </h2>\n\n            <SearchDocPage />\n        </div>\n    );\n};\n\nconst linkstyle = {\n    color: 'white'\n};\n\nexport default ThirdPage;","import React, { Component } from 'react';\n//import './Login.js';\nimport logo from './logo.svg';\nimport './App.css';\n//import { NavLink, Switch, Route } from 'react-router-dom';\n//import \"./App.css\";\n/*Date: 29 June 2020\nAuthor: Himani\nDescription: React Router\nBrowserRouter: To add the ability of handling routing in React\n(Renamed as Router since long name)\nRoute: Renders out a component based on the URL\nSwitch: Stops the whole process of going through all the routes and just renders a specific component*/\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from \"react-router-dom\";\nimport MainPage from \"./welcomepage.jsx\";\n//import loadspinner from \"./pages\";\nimport SecondPage from './CreateAccountDetails.jsx';\nimport ThirdPage from './Search.jsx';\nimport { BeatLoader } from 'react-spinners';\n//import img from './pages/loadingimg.jsx';\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome Onboard!!</h1>  \n      <LoginForm />\n    </div>\n  );\n}*/\n\n//Redirect is used to match the path to the exact page\n//July 1: LoginForm-> MainPage(first route tag changed)\n\n//July 3: <BeatLoader timeout={3000} />...to show the loading spinner\n\n/*Date: 4 July 2020\nAuthor: Himani\nDescription: To demonstrate the utility of Node/Express server(Server Side Rendering)\nWe have created a new module using extends and passed props to the constructor and super class\nand set the state to apiResponse with currently an empty value*/\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={apiResponse:\"\"};\n  }\n  /*Date: July 4 2020\n  Author: Himani\n  Description: Utility of Node/Express server\n  A function created which generates a call to that API url*/\n  callAPI(){\n    fetch(\"http://localhost:9000/testAPI\")\n    .then(res => res.text())//Generate a call to response.text\n    .then(res => this.setState({apiResponse: res}));//Set state to the response that comes from the mentioned url which is a string\n  }\n/*Date: 4 July 2020\nAuthor: Himani\nDescription: To utilize the Node/Express server\nA function which is called the moment the component \nis initialized on the screen which futher \ngenerates a call to the above function*/\n\n/*this.state.apiResponse= prints the message*/\n//Life cycle method to put the component in the DOM\n  componentWillMount(){\n    this.callAPI();\n    \n  }\n  render () {\n    return (\n    <Router>\n      <Switch>\n      <Route exact path=\"/\"  exact component={MainPage} />\n      <Route exact path=\"/CreateAccountDetails\" component={SecondPage} /> \n      <Route exact path=\"/Search\" component={ThirdPage} />     \n      <Redirect to=\"/healthline\"/> \n      </Switch>\n    <p>{this.state.apiResponse}</p>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n\n//<img src={logo} className=\"App-logo\" alt=\"logo\" />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';//Provider makes the redux state available to all the container components\nimport { createStore } from 'redux';//To hold the entire state tree of your application\n//import reducer from './reducers';\nimport './index.css';\n//import './components/Login.css';\n//import LoginForm from './components/LoginForm';\nimport { BrowserRouter } from 'react-router-dom';\n//import * as serviceWorker from './serviceWorker';\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from 'react-loader-spinner';\n\n/*Date:3 July 2020\nAuthor: Himani\nDescription: To give the user as much visual feedback as possible\nDownloaded the react-promise-tracker package\nThis library allows us to show the loading spinner and control it*/\nconst LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker();\n    return (\n      promiseInProgress &&\n      <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n    </div>\n    );  \n   }\n\n   //createStore() holds the entire state tree of your application \n//const store = createStore(reducer)\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  //<Provider store={store}>\n    //<App />\n    //<LoadingIndicator />\n  //</Provider>,\n  //<React.StrictMode>\n   //<App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}